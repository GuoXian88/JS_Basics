/*细细的滚动条*/
&::-webkit-scrollbar {
    width: 3px;
}
&::-webkit-scrollbar-thumb {
    background-color: #b4b4b4;
    border-radius: 4px;
}
&::-webkit-scrollbar-button {
    display: none;
}
&::-webkit-scrollbar-track {
    background-color: #f4f4f4;
}

/*A > B will only select B that are direct children to A (that is, there are no other elements inbetween).

A B will select any B that are inside A, even if there are other elements between them.

display: inline-block可以不换行

有三种定位方案：

普通：根据对象在文档中的位置进行定位，也就是说对象在呈现树中的位置和它在 DOM 树中的位置相似，并根据其框类型和尺寸进行布局。
浮动：对象先按照普通流进行布局，然后尽可能地向左或向右移动。
绝对：对象在呈现树中的位置和它在 DOM 树中的位置不同。
定位方案是由“position”属性和“float”属性设置的。

如果值是 static 和 relative，就是普通流
如果值是 absolute 和 fixed，就是绝对定位

static 定位无需定义位置，而是使用默认定位。对于其他方案，网页作者需要指定位置：top、bottom、left、right。
框的布局方式是由以下因素决定的：

框类型
框尺寸
定位方案
外部信息，例如图片大小和屏幕大小



1.CSS 三大概念: 浮动 定位 盒模型
元素加背景，背景会应用于content + padding
outline绘制在border之上不会影响页面布局
width 和 height是指content的宽高
padding不能为负, margin可以为负
box-sizing: border-box会把border也计算在内
普通文档流中的div的margin会叠加（外和内都会）, 取最大的
空元素的margin会和自身叠加
但是行内框inline,浮动框或position: absolute框之间不会叠加

定位：普通流，浮动，绝对定位
修改行内元素尺寸的唯一方法是修改line-height或者水平border, padding , margin,还有就是将
属性设置为display: inline-block

position: relative元素还占据原来的空间,相对自己在文档流中的位置偏移进行定位,会覆盖其他的div

position: absolute元素位置与文档流无关，不占据空间。其他元素的布局相当于
绝对定位元素不存在一样
绝对定位元素的位置相对于离它最近已经定位的祖先来定位，层叠可用z-index来控制显示
position:fixed是绝对定位的一种,相对于viewport定位,而不是父级元素
fixed  不使用 top left right 之类的定位的时候
margin又是根据父级来定位的
蒙层这种也可以把div放到body的子级



float的div移动直到碰到了包含它的div或者是另外一个float的div边缘
float脱离文档流
float不影响页面元素,但是inline元素会被浮云元素影响(压缩)
清除浮动是让元素的某个方向没有浮云元素

overflow: hidden或者auto会清除浮动

居中
div {
  background:red;
  position:absolute;
  color:#fff;
  top:50%;
  left:50%;
  padding:15px;
  -ms-transform: translateX(-50%) translateY(-50%);
  -webkit-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}
padding
flex
text-align:center, margin: auto
display:table-cell, text-align: center, vertical-align: middle

媒体查询
@media (max-width: 600px) {
  .facet_sidebar {
    display: none;
  }
}

@media screen and (device-aspect-ratio: 16/9), screen and (device-aspect-ratio: 16/10) { ... }

<link rel="stylesheet" media="screen and (max-device-width: 799px)" />

css选择器尽量specific
Conversely, not used just as a quick crutch to override the styling of something instead of figuring out how the CSS was structured and working by the original author.
an ID has infinitely more specificity value! That is, no amount of classes alone can outweigh an ID.
If the element has inline styling, that automatically1 wins (1,0,0,0 points)
For each ID value, apply 0,1,0,0 points
For each class value (or pseudo-class or attribute selector), apply 0,0,1,0 points
For each element reference, apply 0,0,0,1 point

z-index:
z-index only effects elements that have a position value other than static (the default).
Without any z-index value, elements stack in the order that they appear in the DOM (the lowest one down at the same hierarchy level appears on top). 
Also note that nesting plays a big role. If an element B sits on top of element A, a child element of element A can never be higher than element B.


事实上在一个层叠上下文中一共可以有7种层叠等级，列举如下：

背景和边框 —— 形成层叠上下文的元素的背景和边框。 层叠上下文中的最低等级。
负z-index值 —— 层叠上下文内有着负z-index值的子元素。
块级盒 —— 文档流中非行内非定位子元素。
浮动盒 —— 非定位浮动元素。
行内盒 —— 文档流中行内级别非定位子元素。
z-index: 0 —— 定位元素。 这些元素形成了新的层叠上下文。
正z-index值 —— 定位元素。 层叠上下文中的最高等级。


html语义化
基本上都是围绕着几个主要的标签，像标题（H1~H6）、列表（li）、强调（strong em）等等
根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析

a. 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；

b. 用户体验：例如title、alt用于解释名词或解释图片信息的标签尽量填写有含义的词语、label标签的活用；

c. 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；

d. 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以有意义的方式来渲染网页；

e. 便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。

尽可能少的使用无语义的标签div和span；
在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；
不要使用纯样式标签，如：b、font、u等，改用css设置。
需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；
使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；
表单域要用fieldset标签包起来，并用legend标签说明表单的用途；
每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。




遵循html标签原本的含义，让机器也能读懂(爬虫或者搜索引擎SEO)
CSS命名规范（id和class的命名）无论是 ID 还是 class，对任何东西最好总是根据它是什么而不是它看上去是什么样子来命名


伪类:
css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素

伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的css类相似，可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以将其称为伪类


伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中

:first 伪类
:first-letter 伪元素 创建了一个文档之外的元素， 可理解为加了一个span
伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档数外的元素。因此，伪类与伪元素的区别在于：有没有创建一个文档树之外的元素


CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)

translate 50%是相对于自身的
<div class="bg" :style="{transform:'translate3d(50%,-'+moveX+'px,0)',opacity:bg_opacity}"></div>


margin和padding的百分比是相对于父元素width的

absolute不会一直继承，所以一般会外面定成relative,里面再absolute

父级div height为0的原因可能是子级元素都脱离文档流如absolute或者float

fixed定位相对viewport，如react-portal这种需要fixed定位挂到body下
translate(-50%, -50%)才能真正居中
*/

.clear:after {
    content: ".";
    height: 0;
    visibility: hidden;
    display: block;
    clear: both;
}
